
 -->;
 |screenshot = 200px
 |caption = 
 |developer = GNU Project
 |latest_release_version = 6.7.1
 |latest_release_date = October 29, 2007
 |operating_system = 
 |genre = Debugger
 |license = GPL
 |website = [http://www.gnu.org/software/gdb/ gnu.org/software/gdb/]
}}
The GNU Debugger, usually called just GDB, is the standard debugger for the GNU software system. It is a portable debugger that runs on many Unix-like systems and works for many programming languages, including Ada, C, C++, FreeBASIC, and Fortran.

History
GDB was first written by Richard Stallman in 1986 as part of his GNU system, after his GNU Emacs was &quot;reasonably stable&quot;.;; GDB is free software released under the GNU General Public License (GPL). It was modeled after the Dbx debugger, which came withBerkeley Unix distributions.

From 1990 to 1993 it was maintained by John Gilmore while he worked for Cygnus Solutions.

Technical details
=Features=
GDB offers extensive facilities for tracing and altering the execution of computer programs. The user can monitor and modify the values of programs' internal variables, and even call functions independently of the program's normal behavior.

GDB target processors (as of 2003) include:
Alpha, ARM, AVR, H8/300, System/370, System 390, X86 and X86-64, IA-64 &quot;Itanium&quot;, Motorola 68000, MIPS, PA-RISC, PowerPC, SuperH, SPARC, and VAX.

Lesser-known target processors supported in the standard release have included A29K, ARC, CRIS, D10V, D30V, FR-30, FR-V, Intel i960, M32R, 68HC11, Motorola 88000, MCORE, MN10200, MN10300, NS32K, Stormy16, V850, and Z8000.(Newer releases will likely not support some of these.)

GDB has compiled-in simulators for target processors even for lesser-known target processors such like M32R or V850.

GDB is still actively developed.As of early 2007, the focus is on adding &quot;reversible debugging&quot; support;; &amp;mdash; allowing a debugging session to step backwards, much like rewinding a crashed program to see what happened. Adding reversible debugging is one of the High Priority Free Software Projects.

=Remote debugging=
GDB offers a 'remote' mode often used when debugging embedded systems. Remote operation is when GDB runs on one machine and the program being debugged runs on another. GDB can communicate to the remote 'stub' which understands GDB protocol via Serial or TCP/IP.

The same mode is also used by KGDB for debugging a running Linux kernel on the source level with gdb. With kgdb, kernel developers can debug a kernel in much the same way as they debug application programs. It makes it possible to place breakpoints in kernel code, step through the code and observe variables. On architectures where hardware debugging registers are available, watchpoints can be set which trigger breakpoints when specified memory addresses are executed or accessed. kgdb requires an additional machine which is connected to the machine to be debugged using a serial cable or ethernet. On FreeBSD, it is also possible to debug using Firewire DMA.

=Limitations=
The debugger does not contain its own graphical user interface, and defaults to a command-line interface. Several front-ends have been built for it, such as DDD, List of Eclipse projects#Tools projects|Eclipse CDT, Xcode debugger, GDBtk/[http://sources.redhat.com/insight/ Insight] and the &quot;GUD mode&quot; in GNU Emacs. These offer facilities similar to debuggers found in integrated development environments.

GDB does not correctly support C++ templates. ;;

Some other debugging tools have been designed to work with GDB, such as memory leak detectors.

Examples of commands
{| class=&quot;wikitable&quot;
! style=&quot;text-align:left&quot; | ;$ gdb prog.out;
| debug prog.out (from the shell)
|-
! style=&quot;text-align:left&quot; | ;gdb>; run -v;
| run the loaded program with the parameters
|-
! style=&quot;text-align:left&quot; | ;gdb>; bt ;
| backtrace (in case the program crashed)
|-
! style=&quot;text-align:left&quot; | ;gdb>; info registers;
| dump all registers
|-
! style=&quot;text-align:left&quot; | ;gdb>; disass $pc-32 $pc+32;
| disassemble
|}

An example session
This is an example GDB session on the example program in Stack trace:

;
GNU gdb Red Hat Linux (6.3.0.0-1.21rh)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type &quot;show copying&quot; to see the conditions.
There is absolutely no warranty for GDB.Type &quot;show warranty&quot; for details.
This GDB was configured as &quot;i386-redhat-linux-gnu&quot;...Using host libthread_db library &quot;/lib/libthread_db.so.1&quot;.

(gdb) run
Starting program: /home/sam/programming/crash
Reading symbols from shared object read from target memory...done.
Loaded system supplied DSO at 0xc11000
This program will demonstrate gdb

Program received signal SIGSEGV, Segmentation fault.
0x08048428 in function_2 (x=24) at crash.c:22
22 return *y;
(gdb) edit
(gdb) shell gcc crash.c -o crash -gstabs+
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
warning: cannot close &quot;shared object read from target memory&quot;: File in wrong format
`/home/sam/programming/crash' has changed; re-reading symbols.
Starting program: /home/sam/programming/crash
Reading symbols from shared object read from target memory...done.
Loaded system supplied DSO at 0xa3e000
This program will demonstrate gdb
24
Program exited normally.
(gdb) quit
;

The program is being run.After the cause of the segmentation fault is found, the program is edited to use the correct behavior.The corrected program is recompiled with GCC and then run.

See also
 

*Binary File Descriptor library (libbfd)

References


External links
*[http://www.gnu.org/software/gdb/ GDB homepage]
*[http://kgdb.linsyssoft.com kgdb, the gdb backend for debugging the Linux kernel]

=Documentation=
* Richard M. Stallman, Roland Pesch, Stan Shebs, et al., [http://sourceware.org/gdb/current/onlinedocs/gdb.html ''Debugging with GDB''] (Free Software Foundation, 2002) ISBN 1-882114-88-4
*[http://sourceware.org/gdb/current/onlinedocs/gdbint.html GDB Internals]

=Tutorials=
*[http://www.dirac.org/linux/gdb/ Peter Jay Salzman's GDB guide]: ''Using GNU's GDB Debugger''




Category:Debuggers
Category:GNU project software|Debugger
Category:High Priority Free Software Projects

cs:GNU Debugger
de:GNU Debugger
es:GNU Debugger
eo:GDB
eu:GNU Debugger
fr:GNU Debugger
ko:GNU 디버거
it:GNU Debugger
he:GNU Debugger
ja:GNUデバッガ
pl:GNU Debugger
pt:GNU Debugger
ro:GDB
ru:GNU Debugger
sv:GNU Debugger
tr:GNU Debugger
zh:GNU除錯器